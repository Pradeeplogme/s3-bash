#! /bin/bash
cat > /dev/null << EndOfLicence
s3-bash
Copyright 2007 Raphael James Cohn

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
in compliance with the License.
You may obtain a copy of the License at
 
 	http://www.apache.org/licenses/LICENSE-2.0
 	
Unless required by applicable law or agreed to in writing, software distributed under the License
is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
or implied. See the License for the specific language governing permissions and limitations under
the License.
EndOfLicence

# Pragmas
set -u
set -e

# Constants
readonly version="0.01"
readonly ipadXorByte=0x36
readonly opadXorByte=0x5c

# Commands like aliases
readonly sha1="openssl dgst -sha1 -binary"
readonly base64encode="openssl enc -base64 -e -in"
readonly base64decode="openssl enc -base64 -d -in"

function base64EncodedMD5
{
	openssl dgst -md5 -binary "$1" | openssl enc -e -base64
}

function printErrorMessage
{
	printf "%s: %s\n" "$1" "$2" 1>&2
}

function printErrorHelpAndExit
{
	printErrorMessage "$weAreKnownAs" "$1"
	printHelpAndExit $2
}

function checkEnvironment()
{
	if [ ! -x "$(which openssl)" ]; then
		printErrorHelpAndExit "openssl not found on the path or not executable" 2
	elif [ ! -x "$(which curl)" ]; then
		printErrorHelpAndExit "curl not found on the path or not executable" 2
	elif [ ! -x "$(which od)" ]; then
		printErrorHelpAndExit "od not found on the path or not executable" 2
	elif [ ! -x "$(which dd)" ]; then
		printErrorHelpAndExit "dd not found on the path or not executable" 2
	elif [ ! -x "$(which printf)" ]; then
		printErrorHelpAndExit "printf not found on the path or not executable" 2
	elif [ ! -x "$(which sed)" ]; then
		printErrorHelpAndExit "sed not found on the path or not executable" 2
	elif [ ! -x "$(which awk)" ]; then
		printErrorHelpAndExit "awk not found on the path or not executable" 2
	elif [ ! -x "$(which sort)" ]; then
		printErrorHelpAndExit "sort not found on the path or not executable" 2
	elif [ ! -x "$(which mktemp)" ]; then
		printErrorHelpAndExit "mktemp not found on the path or not executable" 2
	elif [ ! -x "$(which rm)" ]; then
		printErrorHelpAndExit "rm not found on the path or not executable" 2
	elif [ ! -x "$(which grep)" ]; then
		printErrorHelpAndExit "grep not found on the path or not executable" 2
	elif [ ! -x "$(which cp)" ]; then
		printErrorHelpAndExit "cp not found on the path or not executable" 2
	elif [ ! -x "$(which ls)" ]; then
		printErrorHelpAndExit "ls not found on the path or not executable" 2
	elif [ ! -x "/bin/bash" ]; then
		printErrorHelpAndExit "/bin/bash not found or not executable" 2
	fi
}

function verifyUrl
{
	if [ -z "$url" ]; then
		printErrorHelpAndExit "URL not specified" 1
	elif echo $url | grep -q http://; then
		printErrorHelpAndExit "URL starts with http://" 1
	elif echo $url | grep -q https://; then
		printErrorHelpAndExit "URL starts with https://" 1
	elif echo $url | grep -v ^/; then
		printErrorHelpAndExit "URL does not start with /" 1
	fi
}

function appendHash
{
	local fileToHash="$1"
	local fileToWriteTo="$2"
	$sha1 "$fileToHash" >> "$fileToWriteTo"
}

function writeHash
{
	local fileToHash="$1"
	local fileToWriteTo="$2"
	$sha1 -out "$fileToWriteTo" "$fileToHash"
}

function checkAwsKey
{
	local originalKeyFile="$1"
	local keySize="$(ls -l "$originalKeyFile" | awk '{ print $5 }')"
	if [ ! $keySize -eq 40 ]; then
		printErrorHelpAndExit "We do not understand Amazon AWS secret keys which are not 40 bytes long. Have you included a carriage return or line feed by mistak at the end of the secret key file?"
	fi
}

function padDecodedKeyTo
{
	local originalKeyFile="$1"
	local keyFile="$2"
	cp "$originalKeyFile" "$keyFile"
	
	local keySize=$(ls -l "$keyFile" | awk '{ print $5 }')
	if [ $keySize -lt 64 ]; then
		local zerosToWrite=$((64 - $keySize))
		dd if=/dev/zero of=$keyFile bs=1 count=$zerosToWrite seek=$keySize 2> /dev/null
	elif [ $keySize -gt 64 ]; then
		echo "Support for hashing keys bigger than the SHA1 block size of 64 bytes is untested" 1>&2
		writeHash "$originalKeyFile" "$keyFile"
		local keySize=$(ls -l "$keyFile" | awk '{ print $5 }')
		if [ $keySize -lt 64 ]; then
			local zerosToWrite=$((64 - $keySize))
			dd if=/dev/zero of=$keyFile bs=1 count=$zerosToWrite seek=$keySize 2> /dev/null
		fi
		exit 1
	else
		:
	fi
}

function writeLongAsByte
{
	local byte="$1"
	local file="$2"
	printf "\\$(printf "%o" $byte)" >> "$file"
}

function readBytesAndXorAndWriteAsBytesTo
{
	local inputFile="$1"
	local xorByte=$2
	local outputFile="$3"
	
	od -v -A n -t uC "$inputFile" | awk '{ OFS="\n"; for (i = 1; i <= NF; i++) print $i }' |
	while read byte; do
		((xord = byte ^ xorByte))
		writeLongAsByte $xord "$outputFile"
	done
}

function writeHexByte
{
	local byte="$1"
	local file="$2"
	printf "\\$(printf "%o" 0x$byte)" >> "$file"
}

function writeHexString
{
	local hexString="$1"
	for byte in $(echo $hexString | sed 's/../& /g'); do
		writeHexByte "$byte" "$2"
	done
}

function writeStringToSign
{
	local outputFile="$1"
	echo $verb >> "$outputFile"
	echo "$contentMD5" >> "$outputFile"
	echo "$contentType" >> "$outputFile"
	echo "$currentDateTime" >> "$outputFile"
	
	writeStringToSignAmazonHeaders "$outputFile"
	
	urlPath="$(echo "$url" | awk 'BEGIN { FS="[?]"} { print $1 }')"
	urlQueryString="$(echo "$url" | awk 'BEGIN { FS="[?]"} { print $2 }')"
	printf "$urlPath" >> "$outputFile"
	if [ "$urlQueryString" = "acl" ] || [ "$urlQueryString" = "torrent" ]; then
		printf "?" >> "$outputFile"
		printf "$urlQueryString" >> "$outputFile"
	fi
}

function writeStringToSignAmazonHeaders()
{
	local outputFile="$1"
	
	#Convert all headers to lower case
	#sort
	#Strip ": " to ":"
	#Add LF to each header
	awk 'BEGIN { FS=": " } NF == 2 { print tolower($1) ":" $2 }' "$amazonHeaderFile" | sort >> "$outputFile"
	#TODO: RFC 2616, section 4.2 (combine repeated headers' values)
	#TODO: Unfold long lines (not supported elsewhere)
}

function computeAwsAuthorizationHeader
{
	checkAwsKey "$awsAccessSecretKeyIdFile"
	
	local tempKeyFile="$(mktemp /tmp/$weAreKnownAs.key.XXXXXX)"
	local ipadHashingFile="$(mktemp /tmp/$weAreKnownAs.ipad.XXXXXX)"
	local opadHashingFile="$(mktemp /tmp/$weAreKnownAs.opad.XXXXXX)"
	local hmacSha1File="$(mktemp /tmp/$weAreKnownAs.HMAC-SHA1.XXXXXX)"
	local cleanUpCommand="rm -f "$tempKeyFile"; rm -f "$ipadHashingFile"; rm -f "$opadHashingFile"; rm -f "$hmacSha1File""
	trap "$cleanUpCommand; exit 1" INT TERM EXIT

	padDecodedKeyTo "$awsAccessSecretKeyIdFile" "$tempKeyFile"
	readBytesAndXorAndWriteAsBytesTo "$tempKeyFile" ipadXorByte "$ipadHashingFile"

	writeStringToSign "$ipadHashingFile"

	readBytesAndXorAndWriteAsBytesTo "$tempKeyFile" opadXorByte "$opadHashingFile"
	appendHash "$ipadHashingFile" "$opadHashingFile"
	writeHash "$opadHashingFile" "$hmacSha1File"

	local signature="$($base64encode "$hmacSha1File")"

	$cleanUpCommand
	trap - INT TERM EXIT

	echo "Authorization: AWS $awsAccessKeyId:$signature"
}

function writeAmazonHeadersForCurl
{
	if [ ! -e "$amazonHeaderFile" ]; then
		printErrorHelpAndExit "Amazon Header file does not exist" 1
	elif grep -q ^X-Amz-Date: "$amazonHeaderFile"; then
		printErrorHelpAndExit "X-Amz-Date header not allowed" 1
	fi
	# Consider using sed...
	awk 'BEGIN { ORS=" "; FS="\0" } { print "--header \"" $1 "\""}' "$amazonHeaderFile" >> "$1"
}

function runCurl
{
	local verbAndAnyData="$1"
	local fullUrl="$protocol://s3.amazonaws.com$url"
	local tempCurlCommand="$(mktemp /tmp/$weAreKnownAs.curl.XXXXXX)"
	local cleanUpCommand="rm -f "$tempCurlCommand""
	#trap "$cleanUpCommand; exit 1" INT TERM EXIT

	echo "#! /bin/bash" >> "$tempCurlCommand"
	printf "curl %s %s --dump-header \"%s\" " "$verbose" "$verbAndAnyData" "$dumpHeaderFile" >> "$tempCurlCommand"
	writeAmazonHeadersForCurl "$tempCurlCommand"
	printf " --header \"%s\"" "Date: $currentDateTime" >> "$tempCurlCommand"
	printf " --header \"%s\"" "$authorizationHeader" >> "$tempCurlCommand"
	if [ ! -z "$contentType" ]; then
		printf " --header \"Content-Type: %s\"" "$contentType" >> "$tempCurlCommand"
	fi
	if [ ! -z "$contentMD5" ]; then
		printf " --header \"Content-MD5: %s\"" "$contentMD5" >> "$tempCurlCommand"
	fi
	printf " \"%s\"\n" "$fullUrl" >> "$tempCurlCommand"

	/bin/bash "$tempCurlCommand"

	#$cleanUpCommand
	trap - INT TERM EXIT
}

